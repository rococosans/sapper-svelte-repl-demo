import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, h as element, r as text, f as space, k as claim_element, l as children, u as claim_text, m as detach_dev, j as claim_space, o as attr_dev, p as add_location, q as insert_dev, v as append_dev, x as set_data_dev, X as destroy_each, n as noop, J as toggle_class, O as onMount, H as binding_callbacks, a0 as bind, A as mount_component, t as transition_in, b as transition_out, D as destroy_component, K as add_render_callback, Q as add_resize_listener, F as check_outros, E as group_outros, a1 as add_flush_callback } from './index.121aa0ed.js';
import './index.ab7b6b80.js';
import { g as goto } from './app.688aaf8d.js';
import { R as Repl } from './Repl.d20fb43b.js';
import { p as process_example } from './examples.83e383fd.js';
import { s as svelteUrl, r as rollupUrl, m as mapbox_setup, S as ScreenToggle } from './config.305e0082.js';
import { g as getFragment } from './navigation.84703ebc.js';

/* src\routes\examples\_TableOfContents.svelte generated by Svelte v3.12.0 */

const file = "src\\routes\\examples\\_TableOfContents.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.example = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.section = list[i];
	return child_ctx;
}

// (80:2) {#each section.examples as example}
function create_each_block_1(ctx) {
	var a, img, img_alt_value, img_src_value, t0, span, t1_value = ctx.example.title + "", t1, a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			img = element("img");
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			img = claim_element(a_nodes, "IMG", { class: true, alt: true, src: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach_dev);
			t0 = claim_space(a_nodes);

			span = claim_element(a_nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(img, "class", "thumbnail svelte-19nklyx");
			attr_dev(img, "alt", img_alt_value = "" + ctx.example.title + " thumbnail");
			attr_dev(img, "src", img_src_value = "examples/thumbnails/" + ctx.example.slug + ".jpg");
			add_location(img, file, 86, 3, 1636);
			add_location(span, file, 92, 3, 1758);
			attr_dev(a, "href", a_href_value = "examples#" + ctx.example.slug);
			attr_dev(a, "class", "row svelte-19nklyx");
			toggle_class(a, "active", ctx.example.slug === ctx.active_section);
			toggle_class(a, "loading", ctx.isLoading);
			add_location(a, file, 80, 2, 1494);
		},

		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, img);
			append_dev(a, t0);
			append_dev(a, span);
			append_dev(span, t1);
		},

		p: function update(changed, ctx) {
			if ((changed.sections) && img_alt_value !== (img_alt_value = "" + ctx.example.title + " thumbnail")) {
				attr_dev(img, "alt", img_alt_value);
			}

			if ((changed.sections) && img_src_value !== (img_src_value = "examples/thumbnails/" + ctx.example.slug + ".jpg")) {
				attr_dev(img, "src", img_src_value);
			}

			if ((changed.sections) && t1_value !== (t1_value = ctx.example.title + "")) {
				set_data_dev(t1, t1_value);
			}

			if ((changed.sections) && a_href_value !== (a_href_value = "examples#" + ctx.example.slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if ((changed.sections || changed.active_section)) {
				toggle_class(a, "active", ctx.example.slug === ctx.active_section);
			}

			if (changed.isLoading) {
				toggle_class(a, "loading", ctx.isLoading);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(a);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block_1.name, type: "each", source: "(80:2) {#each section.examples as example}", ctx });
	return block;
}

// (74:1) {#each sections as section}
function create_each_block(ctx) {
	var li, span, t0_value = ctx.section.title + "", t0, t1, t2;

	let each_value_1 = ctx.section.examples;

	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			li = element("li");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true }, false);
			var li_nodes = children(li);

			span = claim_element(li_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, t0_value);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li_nodes);
			}

			t2 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(span, "class", "section-title svelte-19nklyx");
			add_location(span, file, 75, 2, 1395);
			attr_dev(li, "class", "svelte-19nklyx");
			add_location(li, file, 74, 1, 1388);
		},

		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, span);
			append_dev(span, t0);
			append_dev(li, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li, null);
			}

			append_dev(li, t2);
		},

		p: function update(changed, ctx) {
			if ((changed.sections) && t0_value !== (t0_value = ctx.section.title + "")) {
				set_data_dev(t0, t0_value);
			}

			if (changed.sections || changed.active_section || changed.isLoading) {
				each_value_1 = ctx.section.examples;

				let i;
				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(li, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value_1.length;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(li);
			}

			destroy_each(each_blocks, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block.name, type: "each", source: "(74:1) {#each sections as section}", ctx });
	return block;
}

function create_fragment(ctx) {
	var ul;

	let each_value = ctx.sections;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(ul, "class", "examples-toc svelte-19nklyx");
			add_location(ul, file, 72, 0, 1332);
		},

		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},

		p: function update(changed, ctx) {
			if (changed.sections || changed.active_section || changed.isLoading) {
				each_value = ctx.sections;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(ul);
			}

			destroy_each(each_blocks, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { sections = [], active_section = null, isLoading = false } = $$props;

	const writable_props = ['sections', 'active_section', 'isLoading'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<TableOfContents> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('active_section' in $$props) $$invalidate('active_section', active_section = $$props.active_section);
		if ('isLoading' in $$props) $$invalidate('isLoading', isLoading = $$props.isLoading);
	};

	$$self.$capture_state = () => {
		return { sections, active_section, isLoading };
	};

	$$self.$inject_state = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('active_section' in $$props) $$invalidate('active_section', active_section = $$props.active_section);
		if ('isLoading' in $$props) $$invalidate('isLoading', isLoading = $$props.isLoading);
	};

	return { sections, active_section, isLoading };
}

class TableOfContents extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["sections", "active_section", "isLoading"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "TableOfContents", options, id: create_fragment.name });
	}

	get sections() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active_section() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active_section(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isLoading() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isLoading(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\routes\examples\index.svelte generated by Svelte v3.12.0 */

const file$1 = "src\\routes\\examples\\index.svelte";

// (119:1) {#if mobile}
function create_if_block(ctx) {
	var updating_offset, current;

	function screentoggle_offset_binding(value) {
		ctx.screentoggle_offset_binding.call(null, value);
		updating_offset = true;
		add_flush_callback(() => updating_offset = false);
	}

	let screentoggle_props = { labels: ['index', 'input', 'output'] };
	if (ctx.offset !== void 0) {
		screentoggle_props.offset = ctx.offset;
	}
	var screentoggle = new ScreenToggle({
		props: screentoggle_props,
		$$inline: true
	});

	binding_callbacks.push(() => bind(screentoggle, 'offset', screentoggle_offset_binding));

	const block = {
		c: function create() {
			screentoggle.$$.fragment.c();
		},

		l: function claim(nodes) {
			screentoggle.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(screentoggle, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var screentoggle_changes = {};
			if (!updating_offset && changed.offset) {
				screentoggle_changes.offset = ctx.offset;
			}
			screentoggle.$set(screentoggle_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(screentoggle.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(screentoggle.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(screentoggle, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(119:1) {#if mobile}", ctx });
	return block;
}

function create_fragment$1(ctx) {
	var title_value, meta0, meta1, meta2, t0, div2, div1, t1, div0, div1_class_value, t2, div2_resize_listener, current;

	document.title = title_value = "" + ctx.title + " " + (ctx.title ? '•' : '') + " Svelte Examples";

	var tableofcontents = new TableOfContents({
		props: {
		sections: ctx.sections,
		active_section: ctx.active_slug,
		isLoading: ctx.isLoading
	},
		$$inline: true
	});

	let repl_1_props = {
		workersUrl: "workers",
		svelteUrl: svelteUrl,
		rollupUrl: rollupUrl,
		orientation: ctx.replOrientation,
		fixed: ctx.mobile,
		relaxed: true,
		injectedJS: mapbox_setup
	};
	var repl_1 = new Repl({ props: repl_1_props, $$inline: true });

	ctx.repl_1_binding(repl_1);

	var if_block = (ctx.mobile) && create_if_block(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			tableofcontents.$$.fragment.c();
			t1 = space();
			div0 = element("div");
			repl_1.$$.fragment.c();
			t2 = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta0_nodes = children(meta0);

			meta0_nodes.forEach(detach_dev);

			meta1 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta1_nodes = children(meta1);

			meta1_nodes.forEach(detach_dev);

			meta2 = claim_element(nodes, "META", { name: true, content: true }, false);
			var meta2_nodes = children(meta2);

			meta2_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);

			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			tableofcontents.$$.fragment.l(div1_nodes);
			t1 = claim_space(div1_nodes);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			repl_1.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			if (if_block) if_block.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte examples");
			add_location(meta0, file$1, 97, 1, 2414);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Cybernetically enhanced web apps");
			add_location(meta1, file$1, 98, 1, 2469);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Interactive example Svelte apps");
			add_location(meta2, file$1, 99, 1, 2547);
			attr_dev(div0, "class", "repl-container svelte-1eucojc");
			toggle_class(div0, "loading", ctx.isLoading);
			add_location(div0, file$1, 105, 2, 2805);
			attr_dev(div1, "class", div1_class_value = "viewport offset-" + ctx.offset + " svelte-1eucojc");
			add_location(div1, file$1, 103, 1, 2690);
			add_render_callback(() => ctx.div2_resize_handler.call(div2));
			attr_dev(div2, "class", "examples-container svelte-1eucojc");
			add_location(div2, file$1, 102, 0, 2631);
		},

		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			mount_component(tableofcontents, div1, null);
			append_dev(div1, t1);
			append_dev(div1, div0);
			mount_component(repl_1, div0, null);
			append_dev(div2, t2);
			if (if_block) if_block.m(div2, null);
			div2_resize_listener = add_resize_listener(div2, ctx.div2_resize_handler.bind(div2));
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.title) && title_value !== (title_value = "" + ctx.title + " " + (ctx.title ? '•' : '') + " Svelte Examples")) {
				document.title = title_value;
			}

			var tableofcontents_changes = {};
			if (changed.sections) tableofcontents_changes.sections = ctx.sections;
			if (changed.active_slug) tableofcontents_changes.active_section = ctx.active_slug;
			if (changed.isLoading) tableofcontents_changes.isLoading = ctx.isLoading;
			tableofcontents.$set(tableofcontents_changes);

			var repl_1_changes = {};
			if (changed.replOrientation) repl_1_changes.orientation = ctx.replOrientation;
			if (changed.mobile) repl_1_changes.fixed = ctx.mobile;
			repl_1.$set(repl_1_changes);

			if (changed.isLoading) {
				toggle_class(div0, "loading", ctx.isLoading);
			}

			if ((!current || changed.offset) && div1_class_value !== (div1_class_value = "viewport offset-" + ctx.offset + " svelte-1eucojc")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (ctx.mobile) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div2, null);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(tableofcontents.$$.fragment, local);

			transition_in(repl_1.$$.fragment, local);

			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(tableofcontents.$$.fragment, local);
			transition_out(repl_1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);

			if (detaching) {
				detach_dev(t0);
				detach_dev(div2);
			}

			destroy_component(tableofcontents);

			ctx.repl_1_binding(null);

			destroy_component(repl_1);

			if (if_block) if_block.d();
			div2_resize_listener.cancel();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

async function preload() {
	const sections = await this.fetch(`examples.json`).then(r => r.json());
	const title_by_slug = sections.reduce((acc, {examples}) => {
		examples.forEach(({slug, title}) => {
			acc[slug] = title;
		});

		return acc;
	}, {});

	return {sections, title_by_slug};
}

function instance$1($$self, $$props, $$invalidate) {
	

	let { sections, title_by_slug } = $$props;

	let active_slug;
	let width;
	let offset = 1;
	let repl;
	let isLoading = false;
	const cache = {};

	function showExampleCodeOnChange() {
		$$invalidate('offset', offset = 1);
	}

	onMount(() => {
		const onhashchange = () => {
			$$invalidate('active_slug', active_slug = getFragment());
		};
		window.addEventListener('hashchange', onhashchange, false);

		const fragment = getFragment();
		if (fragment) {
			$$invalidate('active_slug', active_slug = fragment);
		} else {
			$$invalidate('active_slug', active_slug = first_slug);
			goto(`examples#${active_slug}`);
		}

		return () => {
			window.removeEventListener('hashchange', onhashchange, false);
		};
	});

	const writable_props = ['sections', 'title_by_slug'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	function repl_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('repl', repl = $$value);
		});
	}

	function screentoggle_offset_binding(value) {
		offset = value;
		$$invalidate('offset', offset);
	}

	function div2_resize_handler() {
		width = this.clientWidth;
		$$invalidate('width', width);
	}

	$$self.$set = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('title_by_slug' in $$props) $$invalidate('title_by_slug', title_by_slug = $$props.title_by_slug);
	};

	$$self.$capture_state = () => {
		return { sections, title_by_slug, active_slug, width, offset, repl, isLoading, title, first_slug, mobile, replOrientation };
	};

	$$self.$inject_state = $$props => {
		if ('sections' in $$props) $$invalidate('sections', sections = $$props.sections);
		if ('title_by_slug' in $$props) $$invalidate('title_by_slug', title_by_slug = $$props.title_by_slug);
		if ('active_slug' in $$props) $$invalidate('active_slug', active_slug = $$props.active_slug);
		if ('width' in $$props) $$invalidate('width', width = $$props.width);
		if ('offset' in $$props) $$invalidate('offset', offset = $$props.offset);
		if ('repl' in $$props) $$invalidate('repl', repl = $$props.repl);
		if ('isLoading' in $$props) $$invalidate('isLoading', isLoading = $$props.isLoading);
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('first_slug' in $$props) first_slug = $$props.first_slug;
		if ('mobile' in $$props) $$invalidate('mobile', mobile = $$props.mobile);
		if ('replOrientation' in $$props) $$invalidate('replOrientation', replOrientation = $$props.replOrientation);
	};

	let title, first_slug, mobile, replOrientation;

	$$self.$$.update = ($$dirty = { title_by_slug: 1, active_slug: 1, sections: 1, width: 1, mobile: 1, repl: 1, cache: 1 }) => {
		if ($$dirty.title_by_slug || $$dirty.active_slug) { $$invalidate('title', title = title_by_slug[active_slug] || ''); }
		if ($$dirty.sections) { first_slug = sections[0].examples[0].slug; }
		if ($$dirty.width) { $$invalidate('mobile', mobile = width < 768); }
		if ($$dirty.mobile || $$dirty.width) { $$invalidate('replOrientation', replOrientation = (mobile || width > 1080) ? 'columns' : 'rows'); }
		if ($$dirty.repl || $$dirty.active_slug || $$dirty.cache) { if (repl && active_slug) {
				if (active_slug in cache) {
					repl.set({ components: cache[active_slug] });
					showExampleCodeOnChange();
				} else {
					$$invalidate('isLoading', isLoading = true);
					fetch(`examples/${active_slug}.json`)
						.then(async response => {
							if (response.ok) {
								const {files} = await response.json();
								return process_example(files);
							}
						})
						.then(components => {
							$$invalidate('cache', cache[active_slug] = components, cache);
							repl.set({components});
							showExampleCodeOnChange();
							$$invalidate('isLoading', isLoading = false);
						})
						.catch(() => {
							$$invalidate('isLoading', isLoading = false);
						});
				}
			} }
	};

	return {
		sections,
		title_by_slug,
		active_slug,
		width,
		offset,
		repl,
		isLoading,
		title,
		mobile,
		replOrientation,
		repl_1_binding,
		screentoggle_offset_binding,
		div2_resize_handler
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["sections", "title_by_slug"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$1.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.sections === undefined && !('sections' in props)) {
			console.warn("<Index> was created without expected prop 'sections'");
		}
		if (ctx.title_by_slug === undefined && !('title_by_slug' in props)) {
			console.warn("<Index> was created without expected prop 'title_by_slug'");
		}
	}

	get sections() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title_by_slug() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title_by_slug(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
